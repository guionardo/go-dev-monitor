// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package repository

import (
	json "encoding/json"
	_v6 "github.com/go-git/go-git/v6"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson17dbe70DecodeGithubComGuionardoGoDevMonitorInternalRepository(in *jlexer.Lexer, out *Local) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "origin":
			out.Origin = string(in.String())
		case "folder_name":
			out.FolderName = string(in.String())
		case "current_branch":
			out.CurrentBranch = string(in.String())
		case "clean":
			out.Clean = bool(in.Bool())
		case "untracked":
			if in.IsNull() {
				in.Skip()
				out.UntrackedFiles = nil
			} else {
				in.Delim('[')
				if out.UntrackedFiles == nil {
					if !in.IsDelim(']') {
						out.UntrackedFiles = make([]FileInfo, 0, 1)
					} else {
						out.UntrackedFiles = []FileInfo{}
					}
				} else {
					out.UntrackedFiles = (out.UntrackedFiles)[:0]
				}
				for !in.IsDelim(']') {
					var v1 FileInfo
					(v1).UnmarshalEasyJSON(in)
					out.UntrackedFiles = append(out.UntrackedFiles, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "changed":
			if in.IsNull() {
				in.Skip()
				out.ChangedFiles = nil
			} else {
				in.Delim('[')
				if out.ChangedFiles == nil {
					if !in.IsDelim(']') {
						out.ChangedFiles = make([]FileInfo, 0, 1)
					} else {
						out.ChangedFiles = []FileInfo{}
					}
				} else {
					out.ChangedFiles = (out.ChangedFiles)[:0]
				}
				for !in.IsDelim(']') {
					var v2 FileInfo
					(v2).UnmarshalEasyJSON(in)
					out.ChangedFiles = append(out.ChangedFiles, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "last_modified":
			if in.IsNull() {
				in.Skip()
				out.LastModifiedFiles = nil
			} else {
				in.Delim('[')
				if out.LastModifiedFiles == nil {
					if !in.IsDelim(']') {
						out.LastModifiedFiles = make([]FileInfo, 0, 1)
					} else {
						out.LastModifiedFiles = []FileInfo{}
					}
				} else {
					out.LastModifiedFiles = (out.LastModifiedFiles)[:0]
				}
				for !in.IsDelim(']') {
					var v3 FileInfo
					(v3).UnmarshalEasyJSON(in)
					out.LastModifiedFiles = append(out.LastModifiedFiles, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "current_status":
			out.Status = string(in.String())
		case "last_commit":
			if in.IsNull() {
				in.Skip()
				out.LastCommit = nil
			} else {
				if out.LastCommit == nil {
					out.LastCommit = new(Commit)
				}
				(*out.LastCommit).UnmarshalEasyJSON(in)
			}
		case "hostname":
			out.Hostname = string(in.String())
		case "fetch_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FetchTime).UnmarshalJSON(data))
			}
		case "description":
			out.Description = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "language_icon":
			out.LanguageIcon = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson17dbe70EncodeGithubComGuionardoGoDevMonitorInternalRepository(out *jwriter.Writer, in Local) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"origin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Origin))
	}
	{
		const prefix string = ",\"folder_name\":"
		out.RawString(prefix)
		out.String(string(in.FolderName))
	}
	{
		const prefix string = ",\"current_branch\":"
		out.RawString(prefix)
		out.String(string(in.CurrentBranch))
	}
	{
		const prefix string = ",\"clean\":"
		out.RawString(prefix)
		out.Bool(bool(in.Clean))
	}
	{
		const prefix string = ",\"untracked\":"
		out.RawString(prefix)
		if in.UntrackedFiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.UntrackedFiles {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"changed\":"
		out.RawString(prefix)
		if in.ChangedFiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.ChangedFiles {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"last_modified\":"
		out.RawString(prefix)
		if in.LastModifiedFiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.LastModifiedFiles {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"current_status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"last_commit\":"
		out.RawString(prefix)
		if in.LastCommit == nil {
			out.RawString("null")
		} else {
			(*in.LastCommit).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"hostname\":"
		out.RawString(prefix)
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"fetch_time\":"
		out.RawString(prefix)
		out.Raw((in.FetchTime).MarshalJSON())
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"language_icon\":"
		out.RawString(prefix)
		out.String(string(in.LanguageIcon))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Local) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson17dbe70EncodeGithubComGuionardoGoDevMonitorInternalRepository(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Local) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson17dbe70EncodeGithubComGuionardoGoDevMonitorInternalRepository(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Local) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson17dbe70DecodeGithubComGuionardoGoDevMonitorInternalRepository(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Local) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson17dbe70DecodeGithubComGuionardoGoDevMonitorInternalRepository(l, v)
}
func easyjson17dbe70DecodeGithubComGuionardoGoDevMonitorInternalRepository1(in *jlexer.Lexer, out *FileInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "Status":
			out.Status = _v6.StatusCode(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson17dbe70EncodeGithubComGuionardoGoDevMonitorInternalRepository1(out *jwriter.Writer, in FileInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Time\":"
		out.RawString(prefix)
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson17dbe70EncodeGithubComGuionardoGoDevMonitorInternalRepository1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson17dbe70EncodeGithubComGuionardoGoDevMonitorInternalRepository1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson17dbe70DecodeGithubComGuionardoGoDevMonitorInternalRepository1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson17dbe70DecodeGithubComGuionardoGoDevMonitorInternalRepository1(l, v)
}
func easyjson17dbe70DecodeGithubComGuionardoGoDevMonitorInternalRepository2(in *jlexer.Lexer, out *Commit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "when":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.When).UnmarshalJSON(data))
			}
		case "message":
			out.Message = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "author_email":
			out.AuthorEmail = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson17dbe70EncodeGithubComGuionardoGoDevMonitorInternalRepository2(out *jwriter.Writer, in Commit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"when\":"
		out.RawString(prefix[1:])
		out.Raw((in.When).MarshalJSON())
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"author_email\":"
		out.RawString(prefix)
		out.String(string(in.AuthorEmail))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Commit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson17dbe70EncodeGithubComGuionardoGoDevMonitorInternalRepository2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Commit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson17dbe70EncodeGithubComGuionardoGoDevMonitorInternalRepository2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Commit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson17dbe70DecodeGithubComGuionardoGoDevMonitorInternalRepository2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Commit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson17dbe70DecodeGithubComGuionardoGoDevMonitorInternalRepository2(l, v)
}
