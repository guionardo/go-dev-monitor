// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package api

import (
	json "encoding/json"
	repository "github.com/guionardo/go-dev-monitor/internal/repository"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi(in *jlexer.Lexer, out *SummaryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "origins":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Origins = make(map[string][]LocalRepositoryResponse)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 []LocalRepositoryResponse
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]LocalRepositoryResponse, 0, 0)
							} else {
								v1 = []LocalRepositoryResponse{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 LocalRepositoryResponse
							(v2).UnmarshalEasyJSON(in)
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Origins)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi(out *jwriter.Writer, in SummaryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"origins\":"
		out.RawString(prefix[1:])
		if in.Origins == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Origins {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				if v3Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v4, v5 := range v3Value {
						if v4 > 0 {
							out.RawByte(',')
						}
						(v5).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SummaryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi(l, v)
}
func easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi1(in *jlexer.Lexer, out *ServerResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi1(out *jwriter.Writer, in ServerResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServerResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServerResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServerResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServerResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi1(l, v)
}
func easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi2(in *jlexer.Lexer, out *LocalRepositoryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host_name":
			out.Hostname = string(in.String())
		case "folder_name":
			out.FolderName = string(in.String())
		case "current_branch":
			out.CurrentBranch = string(in.String())
		case "clean":
			out.Clean = bool(in.Bool())
		case "last_commit":
			if in.IsNull() {
				in.Skip()
				out.LastCommit = nil
			} else {
				if out.LastCommit == nil {
					out.LastCommit = new(repository.Commit)
				}
				(*out.LastCommit).UnmarshalEasyJSON(in)
			}
		case "untracked_files":
			if in.IsNull() {
				in.Skip()
				out.UntrackedFiles = nil
			} else {
				in.Delim('[')
				if out.UntrackedFiles == nil {
					if !in.IsDelim(']') {
						out.UntrackedFiles = make([]*FileInfoResponse, 0, 8)
					} else {
						out.UntrackedFiles = []*FileInfoResponse{}
					}
				} else {
					out.UntrackedFiles = (out.UntrackedFiles)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *FileInfoResponse
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(FileInfoResponse)
						}
						(*v6).UnmarshalEasyJSON(in)
					}
					out.UntrackedFiles = append(out.UntrackedFiles, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "changed_files":
			if in.IsNull() {
				in.Skip()
				out.ChangedFiles = nil
			} else {
				in.Delim('[')
				if out.ChangedFiles == nil {
					if !in.IsDelim(']') {
						out.ChangedFiles = make([]*FileInfoResponse, 0, 8)
					} else {
						out.ChangedFiles = []*FileInfoResponse{}
					}
				} else {
					out.ChangedFiles = (out.ChangedFiles)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *FileInfoResponse
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(FileInfoResponse)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.ChangedFiles = append(out.ChangedFiles, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "last_changed_files":
			if in.IsNull() {
				in.Skip()
				out.LastModifiedFiles = nil
			} else {
				in.Delim('[')
				if out.LastModifiedFiles == nil {
					if !in.IsDelim(']') {
						out.LastModifiedFiles = make([]*FileInfoResponse, 0, 8)
					} else {
						out.LastModifiedFiles = []*FileInfoResponse{}
					}
				} else {
					out.LastModifiedFiles = (out.LastModifiedFiles)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *FileInfoResponse
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(FileInfoResponse)
						}
						(*v8).UnmarshalEasyJSON(in)
					}
					out.LastModifiedFiles = append(out.LastModifiedFiles, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fetch_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FetchTime).UnmarshalJSON(data))
			}
		case "description":
			out.Description = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "language_icon":
			out.LanguageIcon = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi2(out *jwriter.Writer, in LocalRepositoryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"host_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"folder_name\":"
		out.RawString(prefix)
		out.String(string(in.FolderName))
	}
	{
		const prefix string = ",\"current_branch\":"
		out.RawString(prefix)
		out.String(string(in.CurrentBranch))
	}
	{
		const prefix string = ",\"clean\":"
		out.RawString(prefix)
		out.Bool(bool(in.Clean))
	}
	{
		const prefix string = ",\"last_commit\":"
		out.RawString(prefix)
		if in.LastCommit == nil {
			out.RawString("null")
		} else {
			(*in.LastCommit).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"untracked_files\":"
		out.RawString(prefix)
		if in.UntrackedFiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.UntrackedFiles {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					(*v10).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"changed_files\":"
		out.RawString(prefix)
		if in.ChangedFiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.ChangedFiles {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"last_changed_files\":"
		out.RawString(prefix)
		if in.LastModifiedFiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.LastModifiedFiles {
				if v13 > 0 {
					out.RawByte(',')
				}
				if v14 == nil {
					out.RawString("null")
				} else {
					(*v14).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"fetch_time\":"
		out.RawString(prefix)
		out.Raw((in.FetchTime).MarshalJSON())
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"language_icon\":"
		out.RawString(prefix)
		out.String(string(in.LanguageIcon))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalRepositoryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalRepositoryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalRepositoryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalRepositoryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi2(l, v)
}
func easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi3(in *jlexer.Lexer, out *FileInfoResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi3(out *jwriter.Writer, in FileInfoResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileInfoResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileInfoResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileInfoResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileInfoResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi3(l, v)
}
func easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi4(in *jlexer.Lexer, out *AgentRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hostname":
			out.Hostname = string(in.String())
		case "repositories":
			if in.IsNull() {
				in.Skip()
				out.Repositories = nil
			} else {
				in.Delim('[')
				if out.Repositories == nil {
					if !in.IsDelim(']') {
						out.Repositories = make([]*repository.Local, 0, 8)
					} else {
						out.Repositories = []*repository.Local{}
					}
				} else {
					out.Repositories = (out.Repositories)[:0]
				}
				for !in.IsDelim(']') {
					var v15 *repository.Local
					if in.IsNull() {
						in.Skip()
						v15 = nil
					} else {
						if v15 == nil {
							v15 = new(repository.Local)
						}
						(*v15).UnmarshalEasyJSON(in)
					}
					out.Repositories = append(out.Repositories, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi4(out *jwriter.Writer, in AgentRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hostname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"repositories\":"
		out.RawString(prefix)
		if in.Repositories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Repositories {
				if v16 > 0 {
					out.RawByte(',')
				}
				if v17 == nil {
					out.RawString("null")
				} else {
					(*v17).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AgentRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AgentRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB9e0b047EncodeGithubComGuionardoGoDevMonitorInternalApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AgentRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AgentRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB9e0b047DecodeGithubComGuionardoGoDevMonitorInternalApi4(l, v)
}
